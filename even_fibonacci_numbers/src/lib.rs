// Even Fibonacci numbers
//
// Problem 2
//
// Each new term in the fibonacci sequence is generated by adding the previous two terms. By
// starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
// the sum of the even-valued terms.
//
use num_bigint::BigUint;
use num_traits::{One, Zero};
use std::mem::replace;

pub mod project_euler {
    use super::*;

    pub fn even_fibonacci_numbers(n: usize) -> BigUint {
        let mut f0: BigUint = Zero::zero();
        let mut f1: BigUint = One::one();
        (0..=n)
            .map(|_| {
                let f2 = &f0 + &f1;
                f0 = replace(&mut f1, f2);
                f0.clone()
            })
            .filter(|x| x % BigUint::parse_bytes(b"2", 10).unwrap() == Zero::zero())
            .sum()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_even_fibonacchi_numbers() {
        assert_eq!(
            project_euler::even_fibonacci_numbers(10),
            BigUint::parse_bytes(b"44", 10).unwrap()
        );
    }
}
